apiVersion: v1
kind: Service
metadata:
  name: kube-controller-manager
  namespace: {{ .Release.Namespace }}
  labels:
    app: kubernetes
    role: controller-manager
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: metrics
    port: {{ include "kube-controller-manager.port" . }}
    protocol: TCP
  selector:
    app: kubernetes
    role: controller-manager
---
apiVersion: {{ include "deploymentversion" . }}
kind: Deployment
metadata:
  name: kube-controller-manager
  namespace: {{ .Release.Namespace }}
  labels:
    garden.sapcloud.io/role: controlplane
    app: kubernetes
    role: controller-manager
spec:
  revisionHistoryLimit: 0
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: kubernetes
      role: controller-manager
  template:
    metadata:
{{- if .Values.podAnnotations }}
      annotations:
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
      labels:
        garden.sapcloud.io/role: controlplane
        app: kubernetes
        role: controller-manager
        networking.gardener.cloud/to-dns: allowed
        networking.gardener.cloud/to-shoot-apiserver: allowed
        networking.gardener.cloud/from-prometheus: allowed
    spec:
      tolerations:
      - effect: NoExecute
        operator: Exists
      containers:
      - name: kube-controller-manager
        image: {{ index .Values.images "hyperkube" }}
        imagePullPolicy: IfNotPresent
        command:
        - /usr/bin/hyperkube
        {{- if semverCompare "< 1.15" .Values.kubernetesVersion }}
        - controller-manager
        {{- else }}
        - kube-controller-manager
        {{- end }}
        - --allocate-node-cidrs=true
        - --attach-detach-reconcile-sync-period=1m0s
        - --controllers=*,bootstrapsigner,tokencleaner
        {{- if .Values.nodeCIDRMaskSize }}
        - --node-cidr-mask-size={{ .Values.nodeCIDRMaskSize }}
        {{- end }}
        - --cluster-cidr={{ .Values.podNetwork }}
        - --cluster-name={{ .Values.clusterName }}
        - --cluster-signing-cert-file=/srv/kubernetes/ca/ca.crt
        - --cluster-signing-key-file=/srv/kubernetes/ca/ca.key
        - --concurrent-deployment-syncs=10
        - --concurrent-replicaset-syncs=10
        {{- include "kube-controller-manager.featureGates" . | trimSuffix "," | indent 8 }}
        {{- if semverCompare "< 1.12" .Values.kubernetesVersion }}
        - --horizontal-pod-autoscaler-downscale-delay={{ .Values.horizontalPodAutoscaler.downscaleDelay }}
        - --horizontal-pod-autoscaler-upscale-delay={{ .Values.horizontalPodAutoscaler.upscaleDelay }}
        {{- end}}
        - --horizontal-pod-autoscaler-sync-period={{ .Values.horizontalPodAutoscaler.syncPeriod }}
        - --horizontal-pod-autoscaler-tolerance={{ .Values.horizontalPodAutoscaler.tolerance }}
        - --kubeconfig=/var/lib/kube-controller-manager/kubeconfig
        - --leader-elect=true
        - --pod-eviction-timeout=2m0s
        - --root-ca-file=/srv/kubernetes/ca/ca.crt
        - --service-account-private-key-file=/srv/kubernetes/service-account-key/id_rsa
        - --service-cluster-ip-range={{ .Values.serviceNetwork }}
        {{- if semverCompare ">= 1.13" .Values.kubernetesVersion }}
        - --secure-port={{ include "kube-controller-manager.port" . }}
        - --port=0
        {{- end }}
        {{- if semverCompare ">= 1.12" .Values.kubernetesVersion }}
        - --horizontal-pod-autoscaler-downscale-stabilization={{ .Values.horizontalPodAutoscaler.downscaleStabilization }}
        - --horizontal-pod-autoscaler-initial-readiness-delay={{ .Values.horizontalPodAutoscaler.readinessDelay }}
        - --horizontal-pod-autoscaler-cpu-initialization-period={{ .Values.horizontalPodAutoscaler.cpuInitializationPeriod }}
        - --authentication-kubeconfig=/var/lib/kube-controller-manager/kubeconfig
        - --authorization-kubeconfig=/var/lib/kube-controller-manager/kubeconfig
        - --tls-cert-file=/var/lib/kube-controller-manager-server/kube-controller-manager-server.crt
        - --tls-private-key-file=/var/lib/kube-controller-manager-server/kube-controller-manager-server.key
        {{- end }}
        - --tls-cipher-suites={{ include "kubernetes.tlsCipherSuites" . | replace "\n" "," | trimPrefix "," }}
        - --use-service-account-credentials=true
        - --v=2
        livenessProbe:
          httpGet:
            path: /healthz
            {{- if semverCompare ">= 1.13" .Values.kubernetesVersion }}
            scheme: HTTPS
            {{- else }}
            scheme: HTTP
            {{- end }}
            port: {{ include "kube-controller-manager.port" . }}
          successThreshold: 1
          failureThreshold: 2
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 15
        ports:
        - name: metrics
          containerPort: {{ include "kube-controller-manager.port" . }}
          protocol: TCP
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        resources:
{{- include "util-templates.resource-quantity" .Values | indent 10 }}
        volumeMounts:
        - name: ca
          mountPath: /srv/kubernetes/ca
        - name: service-account-key
          mountPath: /srv/kubernetes/service-account-key
        - name: kube-controller-manager
          mountPath: /var/lib/kube-controller-manager
        - name: kube-controller-manager-server
          mountPath: /var/lib/kube-controller-manager-server
        - name: etcssl
          mountPath: /etc/ssl
          readOnly: true
        - name: ssl-certs-hosts
          mountPath: /usr/share/ca-certificates
          readOnly: true
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      volumes:
      - name: ca
        secret:
          secretName: ca
      - name: service-account-key
        secret:
          secretName: service-account-key
      - name: kube-controller-manager
        secret:
          secretName: kube-controller-manager
      - name: kube-controller-manager-server
        secret:
          secretName: kube-controller-manager-server
      - name: etcssl
        hostPath:
          path: /etc/ssl
      - name: ssl-certs-hosts
        hostPath:
          path: /usr/share/ca-certificates
